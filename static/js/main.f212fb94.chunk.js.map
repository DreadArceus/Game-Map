{"version":3,"sources":["useCoordinates.js","LocationList.js","map-img.png","Map.js","App.js","reportWebVitals.js","index.js"],"names":["useCoordinates","props","useState","latitude","longitude","coords","setCoords","error","setError","useEffect","geo","navigator","geolocation","watcher","watchPosition","message","clearWatch","useStyles","makeStyles","root","color","item","border","LocationListItem","classes","ListItem","className","ListItemText","index","LocationList","List","activeLocations","map","topLeftEdge","bottomRightEdge","Map","Box","width","height","style","backgroundImage","mapImg","points","scale","location","push","graph","i","length","margin","marginTop","marginLeft","borderRadius","position","fontSize","plot","socket","socketIOClient","transports","darkTheme","createMuiTheme","palette","type","text","primary","App","currentLocation","setCurrentLocation","setActiveLocations","on","locations","Object","values","emit","ThemeProvider","theme","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f212fb94.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useCoordinates = (props) => {\n  const [coords, setCoords] = useState({ latitude: -1, longitude: -1 });\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    const watcher = geo.watchPosition(\n      ({ coords }) =>\n        setCoords({ latitude: coords.latitude, longitude: coords.longitude }),\n      (error) => {\n        setError(error.message);\n      }\n    );\n    return () => geo.clearWatch(watcher);\n  }, []);\n  return { ...coords, error: error };\n};\n\nexport default useCoordinates;\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"white\",\n  },\n  item: {\n    border: \"2px white solid\",\n  },\n});\n\nconst LocationListItem = (props) => {\n  const classes = useStyles();\n  return (\n    <ListItem className={classes.item}>\n      <ListItemText>{props.index}</ListItemText>\n      <ListItemText>Latitude: {props.latitude}</ListItemText>\n      <ListItemText>Longitude: {props.longitude}</ListItemText>\n    </ListItem>\n  );\n};\n\nconst LocationList = (props) => {\n  const classes = useStyles();\n  return (\n    <List className={classes.root}>\n      {props.activeLocations.map((item, index) => {\n        return (\n          <LocationListItem\n            index={index}\n            latitude={item.latitude}\n            longitude={item.longitude}\n          />\n        );\n      })}\n    </List>\n  );\n};\n\nexport default LocationList;\n","export default __webpack_public_path__ + \"static/media/map-img.e54f4fe1.png\";","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport mapImg from \"./map-img.png\";\nconst topLeftEdge = { latitude: 36.341379, longitude: 65.590508 };\nconst bottomRightEdge = { latitude: 8.714294, longitude: 96.804201 };\n\nconst Map = (props) => {\n  const plot = () => {\n    const points = [];\n    const scale = [\n      875 / (topLeftEdge.latitude - bottomRightEdge.latitude),\n      898 / (bottomRightEdge.longitude - topLeftEdge.longitude),\n    ];\n    for (var location of props.activeLocations) {\n      points.push([\n        (topLeftEdge.latitude - location.latitude) * scale[0],\n        (location.longitude - topLeftEdge.longitude) * scale[1],\n      ]);\n    }\n    const graph = [];\n    for (var i = 0; i < points.length; i++) {\n      graph.push(\n        <Box\n          width={15}\n          height={15}\n          margin={0}\n          marginTop={`${points[i][0]}px`}\n          marginLeft={`${points[i][1]}px`}\n          border=\"2px black solid\"\n          borderRadius=\"50%\"\n          position=\"absolute\"\n          fontSize=\"11px\"\n        >{i}</Box>\n      );\n    }\n    return graph;\n  };\n  return (\n    <Box\n      width={898}\n      height={875}\n      border=\"2px white solid\"\n      style={{ backgroundImage: `url(${mapImg})` }}\n      >\n      {plot()}\n    </Box>\n  );\n};\n\nexport default Map;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport useCoordinates from \"./useCoordinates\";\nimport socketIOClient from \"socket.io-client\";\nimport LocationList from \"./LocationList\";\nimport Map from \"./Map\";\nimport Typography from \"@material-ui/core/Typography\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport { ThemeProvider } from \"@material-ui/core\";\n\nconst server = \"https://game-map-dread.herokuapp.com/\";\nlet socket = socketIOClient(server, { transports: [\"websocket\"] });\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    text: {\n      primary: \"white\",\n    },\n  },\n});\n\nfunction App() {\n  const coords = useCoordinates();\n  const [currentLocation, setCurrentLocation] = useState({});\n  const [activeLocations, setActiveLocations] = useState([]);\n  useEffect(() => {\n    socket.on(\"list-update\", (locations) => {\n      setActiveLocations(Object.values(locations));\n    });\n  }, []);\n  useEffect(() => {\n    if (\n      coords.latitude !== currentLocation.latitude ||\n      coords.longitude !== currentLocation.longitude ||\n      coords.error !== currentLocation.error\n    ) {\n      socket.emit(\"coord-update\", coords);\n      setCurrentLocation(coords);\n    }\n  }, [coords, currentLocation]);\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={darkTheme}>\n        <Typography color=\"textPrimary\">\n          Your location: ({coords.latitude}, {coords.longitude})\n        </Typography>\n        <Typography color=\"textPrimary\">\n          All connected locations:\n        </Typography>\n        <LocationList activeLocations={activeLocations} />\n        <Typography color=\"textPrimary\">\n          Map:\n        </Typography>\n        <Map activeLocations={activeLocations}/>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}